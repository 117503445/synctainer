// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: synctainer.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface ReqPostTask {
  image: string;
  platform: string;
  targetImage: string;
  username: string;
  password: string;
}

export interface RespPostTask {
  id: string;
  tagImage: string;
}

export interface ReqGetTask {
  id: string;
}

export interface RespGetTask {
  digest: string;
  githubActionUrl: string;
}

export interface ReqPatchTask {
  id: string;
  digest: string;
  githubActionRunId: string;
}

export interface RespPatchTask {}

//========================================//
//           Fc Protobuf Client           //
//========================================//

/**
 * called by fe
 */
export async function PostTask(
  reqPostTask: ReqPostTask,
  config?: ClientConfiguration,
): Promise<RespPostTask> {
  const response = await PBrequest(
    "/synctainer.Fc/PostTask",
    ReqPostTask.encode(reqPostTask),
    config,
  );
  return RespPostTask.decode(response);
}

export async function GetTask(
  reqGetTask: ReqGetTask,
  config?: ClientConfiguration,
): Promise<RespGetTask> {
  const response = await PBrequest(
    "/synctainer.Fc/GetTask",
    ReqGetTask.encode(reqGetTask),
    config,
  );
  return RespGetTask.decode(response);
}

/**
 * called by gh, update non-empty fields
 */
export async function PatchTask(
  reqPatchTask: ReqPatchTask,
  config?: ClientConfiguration,
): Promise<RespPatchTask> {
  const response = await PBrequest(
    "/synctainer.Fc/PatchTask",
    ReqPatchTask.encode(reqPatchTask),
    config,
  );
  return RespPatchTask.decode(response);
}

//========================================//
//             Fc JSON Client             //
//========================================//

/**
 * called by fe
 */
export async function PostTaskJSON(
  reqPostTask: ReqPostTask,
  config?: ClientConfiguration,
): Promise<RespPostTask> {
  const response = await JSONrequest(
    "/synctainer.Fc/PostTask",
    ReqPostTaskJSON.encode(reqPostTask),
    config,
  );
  return RespPostTaskJSON.decode(response);
}

export async function GetTaskJSON(
  reqGetTask: ReqGetTask,
  config?: ClientConfiguration,
): Promise<RespGetTask> {
  const response = await JSONrequest(
    "/synctainer.Fc/GetTask",
    ReqGetTaskJSON.encode(reqGetTask),
    config,
  );
  return RespGetTaskJSON.decode(response);
}

/**
 * called by gh, update non-empty fields
 */
export async function PatchTaskJSON(
  reqPatchTask: ReqPatchTask,
  config?: ClientConfiguration,
): Promise<RespPatchTask> {
  const response = await JSONrequest(
    "/synctainer.Fc/PatchTask",
    ReqPatchTaskJSON.encode(reqPatchTask),
    config,
  );
  return RespPatchTaskJSON.decode(response);
}

//========================================//
//                   Fc                   //
//========================================//

export interface Fc<Context = unknown> {
  /**
   * called by fe
   */
  PostTask: (
    reqPostTask: ReqPostTask,
    context: Context,
  ) => Promise<RespPostTask> | RespPostTask;
  GetTask: (
    reqGetTask: ReqGetTask,
    context: Context,
  ) => Promise<RespGetTask> | RespGetTask;
  /**
   * called by gh, update non-empty fields
   */
  PatchTask: (
    reqPatchTask: ReqPatchTask,
    context: Context,
  ) => Promise<RespPatchTask> | RespPatchTask;
}

export function createFc<Context>(service: Fc<Context>) {
  return {
    name: "synctainer.Fc",
    methods: {
      PostTask: {
        name: "PostTask",
        handler: service.PostTask,
        input: { protobuf: ReqPostTask, json: ReqPostTaskJSON },
        output: { protobuf: RespPostTask, json: RespPostTaskJSON },
      },
      GetTask: {
        name: "GetTask",
        handler: service.GetTask,
        input: { protobuf: ReqGetTask, json: ReqGetTaskJSON },
        output: { protobuf: RespGetTask, json: RespGetTaskJSON },
      },
      PatchTask: {
        name: "PatchTask",
        handler: service.PatchTask,
        input: { protobuf: ReqPatchTask, json: ReqPatchTaskJSON },
        output: { protobuf: RespPatchTask, json: RespPatchTaskJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ReqPostTask = {
  /**
   * Serializes ReqPostTask to protobuf.
   */
  encode: function (msg: PartialDeep<ReqPostTask>): Uint8Array {
    return ReqPostTask._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ReqPostTask from protobuf.
   */
  decode: function (bytes: ByteSource): ReqPostTask {
    return ReqPostTask._readMessage(
      ReqPostTask.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ReqPostTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqPostTask>): ReqPostTask {
    return {
      image: "",
      platform: "",
      targetImage: "",
      username: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqPostTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.image) {
      writer.writeString(1, msg.image);
    }
    if (msg.platform) {
      writer.writeString(2, msg.platform);
    }
    if (msg.targetImage) {
      writer.writeString(3, msg.targetImage);
    }
    if (msg.username) {
      writer.writeString(4, msg.username);
    }
    if (msg.password) {
      writer.writeString(5, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReqPostTask,
    reader: protoscript.BinaryReader,
  ): ReqPostTask {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.image = reader.readString();
          break;
        }
        case 2: {
          msg.platform = reader.readString();
          break;
        }
        case 3: {
          msg.targetImage = reader.readString();
          break;
        }
        case 4: {
          msg.username = reader.readString();
          break;
        }
        case 5: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RespPostTask = {
  /**
   * Serializes RespPostTask to protobuf.
   */
  encode: function (msg: PartialDeep<RespPostTask>): Uint8Array {
    return RespPostTask._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes RespPostTask from protobuf.
   */
  decode: function (bytes: ByteSource): RespPostTask {
    return RespPostTask._readMessage(
      RespPostTask.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes RespPostTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespPostTask>): RespPostTask {
    return {
      id: "",
      tagImage: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RespPostTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.tagImage) {
      writer.writeString(2, msg.tagImage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RespPostTask,
    reader: protoscript.BinaryReader,
  ): RespPostTask {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.tagImage = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ReqGetTask = {
  /**
   * Serializes ReqGetTask to protobuf.
   */
  encode: function (msg: PartialDeep<ReqGetTask>): Uint8Array {
    return ReqGetTask._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ReqGetTask from protobuf.
   */
  decode: function (bytes: ByteSource): ReqGetTask {
    return ReqGetTask._readMessage(
      ReqGetTask.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ReqGetTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqGetTask>): ReqGetTask {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqGetTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReqGetTask,
    reader: protoscript.BinaryReader,
  ): ReqGetTask {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RespGetTask = {
  /**
   * Serializes RespGetTask to protobuf.
   */
  encode: function (msg: PartialDeep<RespGetTask>): Uint8Array {
    return RespGetTask._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes RespGetTask from protobuf.
   */
  decode: function (bytes: ByteSource): RespGetTask {
    return RespGetTask._readMessage(
      RespGetTask.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes RespGetTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespGetTask>): RespGetTask {
    return {
      digest: "",
      githubActionUrl: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RespGetTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.digest) {
      writer.writeString(1, msg.digest);
    }
    if (msg.githubActionUrl) {
      writer.writeString(2, msg.githubActionUrl);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RespGetTask,
    reader: protoscript.BinaryReader,
  ): RespGetTask {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.digest = reader.readString();
          break;
        }
        case 2: {
          msg.githubActionUrl = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ReqPatchTask = {
  /**
   * Serializes ReqPatchTask to protobuf.
   */
  encode: function (msg: PartialDeep<ReqPatchTask>): Uint8Array {
    return ReqPatchTask._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ReqPatchTask from protobuf.
   */
  decode: function (bytes: ByteSource): ReqPatchTask {
    return ReqPatchTask._readMessage(
      ReqPatchTask.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ReqPatchTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqPatchTask>): ReqPatchTask {
    return {
      id: "",
      digest: "",
      githubActionRunId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqPatchTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.digest) {
      writer.writeString(2, msg.digest);
    }
    if (msg.githubActionRunId) {
      writer.writeString(3, msg.githubActionRunId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReqPatchTask,
    reader: protoscript.BinaryReader,
  ): ReqPatchTask {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.digest = reader.readString();
          break;
        }
        case 3: {
          msg.githubActionRunId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RespPatchTask = {
  /**
   * Serializes RespPatchTask to protobuf.
   */
  encode: function (_msg?: PartialDeep<RespPatchTask>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes RespPatchTask from protobuf.
   */
  decode: function (_bytes?: ByteSource): RespPatchTask {
    return {};
  },

  /**
   * Initializes RespPatchTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespPatchTask>): RespPatchTask {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<RespPatchTask>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: RespPatchTask,
    _reader: protoscript.BinaryReader,
  ): RespPatchTask {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ReqPostTaskJSON = {
  /**
   * Serializes ReqPostTask to JSON.
   */
  encode: function (msg: PartialDeep<ReqPostTask>): string {
    return JSON.stringify(ReqPostTaskJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReqPostTask from JSON.
   */
  decode: function (json: string): ReqPostTask {
    return ReqPostTaskJSON._readMessage(
      ReqPostTaskJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ReqPostTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqPostTask>): ReqPostTask {
    return {
      image: "",
      platform: "",
      targetImage: "",
      username: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqPostTask>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.image) {
      json["image"] = msg.image;
    }
    if (msg.platform) {
      json["platform"] = msg.platform;
    }
    if (msg.targetImage) {
      json["targetImage"] = msg.targetImage;
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReqPostTask, json: any): ReqPostTask {
    const _image_ = json["image"];
    if (_image_) {
      msg.image = _image_;
    }
    const _platform_ = json["platform"];
    if (_platform_) {
      msg.platform = _platform_;
    }
    const _targetImage_ = json["targetImage"];
    if (_targetImage_) {
      msg.targetImage = _targetImage_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const RespPostTaskJSON = {
  /**
   * Serializes RespPostTask to JSON.
   */
  encode: function (msg: PartialDeep<RespPostTask>): string {
    return JSON.stringify(RespPostTaskJSON._writeMessage(msg));
  },

  /**
   * Deserializes RespPostTask from JSON.
   */
  decode: function (json: string): RespPostTask {
    return RespPostTaskJSON._readMessage(
      RespPostTaskJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes RespPostTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespPostTask>): RespPostTask {
    return {
      id: "",
      tagImage: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RespPostTask>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.tagImage) {
      json["tagImage"] = msg.tagImage;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RespPostTask, json: any): RespPostTask {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _tagImage_ = json["tagImage"];
    if (_tagImage_) {
      msg.tagImage = _tagImage_;
    }
    return msg;
  },
};

export const ReqGetTaskJSON = {
  /**
   * Serializes ReqGetTask to JSON.
   */
  encode: function (msg: PartialDeep<ReqGetTask>): string {
    return JSON.stringify(ReqGetTaskJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReqGetTask from JSON.
   */
  decode: function (json: string): ReqGetTask {
    return ReqGetTaskJSON._readMessage(
      ReqGetTaskJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ReqGetTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqGetTask>): ReqGetTask {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqGetTask>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReqGetTask, json: any): ReqGetTask {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const RespGetTaskJSON = {
  /**
   * Serializes RespGetTask to JSON.
   */
  encode: function (msg: PartialDeep<RespGetTask>): string {
    return JSON.stringify(RespGetTaskJSON._writeMessage(msg));
  },

  /**
   * Deserializes RespGetTask from JSON.
   */
  decode: function (json: string): RespGetTask {
    return RespGetTaskJSON._readMessage(
      RespGetTaskJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes RespGetTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespGetTask>): RespGetTask {
    return {
      digest: "",
      githubActionUrl: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RespGetTask>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.digest) {
      json["digest"] = msg.digest;
    }
    if (msg.githubActionUrl) {
      json["githubActionUrl"] = msg.githubActionUrl;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RespGetTask, json: any): RespGetTask {
    const _digest_ = json["digest"];
    if (_digest_) {
      msg.digest = _digest_;
    }
    const _githubActionUrl_ =
      json["githubActionUrl"] ?? json["github_action_url"];
    if (_githubActionUrl_) {
      msg.githubActionUrl = _githubActionUrl_;
    }
    return msg;
  },
};

export const ReqPatchTaskJSON = {
  /**
   * Serializes ReqPatchTask to JSON.
   */
  encode: function (msg: PartialDeep<ReqPatchTask>): string {
    return JSON.stringify(ReqPatchTaskJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReqPatchTask from JSON.
   */
  decode: function (json: string): ReqPatchTask {
    return ReqPatchTaskJSON._readMessage(
      ReqPatchTaskJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ReqPatchTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ReqPatchTask>): ReqPatchTask {
    return {
      id: "",
      digest: "",
      githubActionRunId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ReqPatchTask>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.digest) {
      json["digest"] = msg.digest;
    }
    if (msg.githubActionRunId) {
      json["githubActionRunId"] = msg.githubActionRunId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReqPatchTask, json: any): ReqPatchTask {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _digest_ = json["digest"];
    if (_digest_) {
      msg.digest = _digest_;
    }
    const _githubActionRunId_ =
      json["githubActionRunId"] ?? json["github_action_run_id"];
    if (_githubActionRunId_) {
      msg.githubActionRunId = _githubActionRunId_;
    }
    return msg;
  },
};

export const RespPatchTaskJSON = {
  /**
   * Serializes RespPatchTask to JSON.
   */
  encode: function (_msg?: PartialDeep<RespPatchTask>): string {
    return "{}";
  },

  /**
   * Deserializes RespPatchTask from JSON.
   */
  decode: function (_json?: string): RespPatchTask {
    return {};
  },

  /**
   * Initializes RespPatchTask with all fields set to their default value.
   */
  initialize: function (msg?: Partial<RespPatchTask>): RespPatchTask {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<RespPatchTask>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: RespPatchTask, _json: any): RespPatchTask {
    return msg;
  },
};
